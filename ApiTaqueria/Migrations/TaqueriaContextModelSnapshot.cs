// <auto-generated />
using System;
using ApiTaqueria.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiTaqueria.Migrations
{
    [DbContext(typeof(TaqueriaContext))]
    partial class TaqueriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Asistencias", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_asistencia")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("HoraEntrada")
                        .HasColumnName("hora_entrada");

                    b.Property<TimeSpan>("HoraSalida")
                        .HasColumnName("hora_salida");

                    b.Property<int>("IdEmpleado")
                        .HasColumnName("ID_empleado");

                    b.HasKey("IdAsistencia");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("asistencias");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Compras", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_compra")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("NombreProducto")
                        .HasColumnName("Nombre_producto");

                    b.Property<int>("Proveedor")
                        .HasColumnName("proveedor");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("money");

                    b.HasKey("IdCompra");

                    b.HasIndex("NombreProducto");

                    b.HasIndex("Proveedor");

                    b.ToTable("compras");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.DetalleOrden", b =>
                {
                    b.Property<int>("IdOrden")
                        .HasColumnName("id_orden");

                    b.Property<int>("IdTaco")
                        .HasColumnName("id_taco");

                    b.Property<int>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnName("precio_unitario")
                        .HasColumnType("money");

                    b.HasKey("IdOrden", "IdTaco");

                    b.HasIndex("IdTaco");

                    b.ToTable("detalle_orden");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Detallecompra", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_compra")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnName("precio_unitario")
                        .HasColumnType("money");

                    b.Property<int>("Producto");

                    b.HasKey("IdCompra");

                    b.HasIndex("Producto");

                    b.ToTable("detallecompra");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Empleados", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_empleado")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasColumnName("apellido_1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Apellido2")
                        .IsRequired()
                        .HasColumnName("apellido_2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasColumnName("puesto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Salario")
                        .HasColumnType("money");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnName("telefono")
                        .HasMaxLength(10);

                    b.HasKey("IdEmpleado");

                    b.ToTable("empleados");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Ingredientes", b =>
                {
                    b.Property<int>("IdIngrendiente")
                        .HasColumnName("ID_ingrendiente");

                    b.Property<int>("Cantidad")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id_producto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MateriaPrima")
                        .HasColumnName("materia_prima");

                    b.HasKey("IdIngrendiente");

                    b.HasIndex("IdProducto");

                    b.HasIndex("MateriaPrima");

                    b.ToTable("ingredientes");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Inventario", b =>
                {
                    b.Property<int>("IdInventario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_inventario")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("IdProveedor")
                        .HasColumnName("Id_proveedor");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnName("Nombre_producto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TipoProducto")
                        .IsRequired()
                        .HasColumnName("Tipo_producto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnName("Unidad_medida")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdInventario")
                        .HasName("PK_productos");

                    b.HasIndex("IdProveedor");

                    b.ToTable("inventario");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Mermas", b =>
                {
                    b.Property<int>("IdMerma")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_merma")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdProducto")
                        .HasColumnName("ID_producto");

                    b.Property<decimal>("PrecioKilo")
                        .HasColumnName("precio_kilo")
                        .HasColumnType("money");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnName("Unidad_medida")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdMerma");

                    b.HasIndex("IdProducto");

                    b.ToTable("mermas");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Ordenes", b =>
                {
                    b.Property<int>("IdOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_orden")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdEmpleado")
                        .HasColumnName("ID_empleado");

                    b.Property<string>("TipoPedido")
                        .IsRequired()
                        .HasColumnName("tipo_pedido")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("money");

                    b.HasKey("IdOrden");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("ordenes");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Productos", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_producto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnName("nombre_producto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Precio")
                        .HasColumnName("precio")
                        .HasColumnType("money");

                    b.HasKey("IdProducto")
                        .HasName("PK_productos_1");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.ProductosProveedores", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnName("ID_proveedor");

                    b.Property<int>("Producto")
                        .HasColumnName("producto");

                    b.HasKey("IdProveedor", "Producto");

                    b.HasIndex("Producto");

                    b.ToTable("productos_proveedores");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Proveedores", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_proveedor")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiasSurte")
                        .IsRequired()
                        .HasColumnName("Dias_surte")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("NombreContacto")
                        .IsRequired()
                        .HasColumnName("Nombre_contacto")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreFiscal")
                        .IsRequired()
                        .HasColumnName("Nombre_fiscal")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnName("telefono")
                        .HasMaxLength(10);

                    b.HasKey("IdProveedor");

                    b.ToTable("proveedores");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Tacos", b =>
                {
                    b.Property<int>("IdTacos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_tacos")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ingredientes");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Precio")
                        .HasColumnName("precio")
                        .HasColumnType("money");

                    b.HasKey("IdTacos");

                    b.HasIndex("Ingredientes");

                    b.ToTable("tacos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Asistencias", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Empleados", "IdEmpleadoNavigation")
                        .WithMany("Asistencias")
                        .HasForeignKey("IdEmpleado")
                        .HasConstraintName("FK_asistencias_empleados");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Compras", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "NombreProductoNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("NombreProducto")
                        .HasConstraintName("FK_compras_productos");

                    b.HasOne("ApiTaqueria.Persistence.Entities.Proveedores", "ProveedorNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("Proveedor")
                        .HasConstraintName("FK_compras_proveedores");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.DetalleOrden", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Ordenes", "IdOrdenNavigation")
                        .WithMany("DetalleOrden")
                        .HasForeignKey("IdOrden")
                        .HasConstraintName("FK_detalle_orden_ordenes");

                    b.HasOne("ApiTaqueria.Persistence.Entities.Tacos", "IdTacoNavigation")
                        .WithMany("DetalleOrden")
                        .HasForeignKey("IdTaco")
                        .HasConstraintName("FK_detalle_orden_tacos");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Detallecompra", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Compras", "IdCompraNavigation")
                        .WithOne("Detallecompra")
                        .HasForeignKey("ApiTaqueria.Persistence.Entities.Detallecompra", "IdCompra")
                        .HasConstraintName("FK_detallecompra_compras");

                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "ProductoNavigation")
                        .WithMany("Detallecompra")
                        .HasForeignKey("Producto")
                        .HasConstraintName("FK_detallecompra_inventario");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Ingredientes", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Productos", "IdProductoNavigation")
                        .WithMany("Ingredientes")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_ingredientes_productos");

                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "MateriaPrimaNavigation")
                        .WithMany("Ingredientes")
                        .HasForeignKey("MateriaPrima")
                        .HasConstraintName("FK_ingredientes_inventario");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Inventario", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Proveedores", "IdProveedorNavigation")
                        .WithMany("Inventario")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("FK_productos_proveedores");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Mermas", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "IdProductoNavigation")
                        .WithMany("Mermas")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_mermas_productos");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Ordenes", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Empleados", "IdEmpleadoNavigation")
                        .WithMany("Ordenes")
                        .HasForeignKey("IdEmpleado")
                        .HasConstraintName("FK_ordenes_empleados");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.ProductosProveedores", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Proveedores", "IdProveedorNavigation")
                        .WithMany("ProductosProveedores")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("FK_productos_proveedores_proveedores");

                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "ProductoNavigation")
                        .WithMany("ProductosProveedores")
                        .HasForeignKey("Producto")
                        .HasConstraintName("FK_productos_proveedores_inventario");
                });

            modelBuilder.Entity("ApiTaqueria.Persistence.Entities.Tacos", b =>
                {
                    b.HasOne("ApiTaqueria.Persistence.Entities.Inventario", "IngredientesNavigation")
                        .WithMany("Tacos")
                        .HasForeignKey("Ingredientes")
                        .HasConstraintName("FK_tacos_productos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
